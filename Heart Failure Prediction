{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled7.ipynb",
      "private_outputs": true,
      "provenance": [],
      "authorship_tag": "ABX9TyNqcyAjyi939sXoeZTX8I9m",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/gusanans218/AI/blob/main/Heart%20Failure%20Prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KRhsOZYZZPg6"
      },
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('heart_failure_clinical_records_dataset'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import warnings\n",
        "import seaborn as sns\n",
        "from colorama import Fore, Back, Style \n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from mlxtend.plotting import plot_confusion_matrix\n",
        "from plotly.offline import plot, iplot, init_notebook_mode\n",
        "import plotly.graph_objs as go\n",
        "from plotly.subplots import make_subplots\n",
        "import plotly.express as px\n",
        "from statsmodels.formula.api import ols\n",
        "import plotly.graph_objs as gobj\n",
        "\n",
        "init_notebook_mode(connected=True)\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "import plotly.figure_factory as ff\n",
        "\n",
        "%matplotlib inline\n",
        "\n",
        "import xgboost\n",
        "import lightgbm\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from catboost import CatBoostClassifier\n",
        "\n",
        "heart_data = pd.read_csv('heart_failure_clinical_records_dataset.csv')\n",
        "heart_data.head()\n",
        "\n",
        "# age distribution\n",
        "\n",
        "hist_data =[heart_data[\"age\"].values]\n",
        "group_labels = ['age'] \n",
        "\n",
        "fig = ff.create_distplot(hist_data, group_labels)\n",
        "fig.update_layout(title_text='Age Distribution plot')\n",
        "\n",
        "fig.show()\n",
        "\n",
        "fig = px.box(heart_data, x='sex', y='age', points=\"all\")\n",
        "fig.update_layout(\n",
        "    title_text=\"Gender wise Age Spread - Male = 1 Female =0\")\n",
        "fig.show()\n",
        "\n",
        "male = heart_data[heart_data[\"sex\"]==1]\n",
        "female = heart_data[heart_data[\"sex\"]==0]\n",
        "\n",
        "male_survi = male[heart_data[\"DEATH_EVENT\"]==0]\n",
        "male_not = male[heart_data[\"DEATH_EVENT\"]==1]\n",
        "female_survi = female[heart_data[\"DEATH_EVENT\"]==0]\n",
        "female_not = female[heart_data[\"DEATH_EVENT\"]==1]\n",
        "\n",
        "labels = ['Male - Survived','Male - Not Survived', \"Female -  Survived\", \"Female - Not Survived\"]\n",
        "values = [len(male[heart_data[\"DEATH_EVENT\"]==0]),len(male[heart_data[\"DEATH_EVENT\"]==1]),\n",
        "         len(female[heart_data[\"DEATH_EVENT\"]==0]),len(female[heart_data[\"DEATH_EVENT\"]==1])]\n",
        "fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\n",
        "fig.update_layout(\n",
        "    title_text=\"Analysis on Survival - Gender\")\n",
        "fig.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wozn7nvdc2ID"
      },
      "source": [
        "male = heart_data[heart_data[\"sex\"]==1]\n",
        "female = heart_data[heart_data[\"sex\"]==0]\n",
        "\n",
        "male_survi = male[heart_data[\"DEATH_EVENT\"]==0]\n",
        "male_not = male[heart_data[\"DEATH_EVENT\"]==1]\n",
        "female_survi = female[heart_data[\"DEATH_EVENT\"]==0]\n",
        "female_not = female[heart_data[\"DEATH_EVENT\"]==1]\n",
        "\n",
        "labels = ['Male - Survived','Male - Not Survived', \"Female -  Survived\", \"Female - Not Survived\"]\n",
        "values = [len(male[heart_data[\"DEATH_EVENT\"]==0]),len(male[heart_data[\"DEATH_EVENT\"]==1]),\n",
        "         len(female[heart_data[\"DEATH_EVENT\"]==0]),len(female[heart_data[\"DEATH_EVENT\"]==1])]\n",
        "fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\n",
        "fig.update_layout(\n",
        "    title_text=\"Analysis on Survival - Gender\")\n",
        "fig.show()"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}